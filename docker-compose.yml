services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: cloudnet-postgres
    environment:
      POSTGRES_DB: cloudnet_monitor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cloudnet-network
    restart: unless-stopped

  # InfluxDB Time Series Database
  influxdb:
    image: influxdb:2.7
    container_name: cloudnet-influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: password123
      DOCKER_INFLUXDB_INIT_ORG: cloudnet
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - cloudnet-network
    restart: unless-stopped



  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: cloudnet-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: cloudnet_monitor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      INFLUX_HOST: influxdb
      INFLUX_PORT: 8086
      INFLUX_DB: cloudnet_metrics
      JWT_SECRET: your-super-secure-jwt-secret-key
      ALLOWED_ORIGINS: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    networks:
      - cloudnet-network
    depends_on:
      - postgres
      - influxdb
    restart: unless-stopped
    command: npm run dev

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: cloudnet-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
      REACT_APP_WS_URL: ws://localhost:3001/ws
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - cloudnet-network
    depends_on:
      - backend
    restart: unless-stopped
    command: npm start

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: cloudnet-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - cloudnet-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

  # Prometheus for Metrics Collection (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: cloudnet-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cloudnet-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: cloudnet-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - cloudnet-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  influxdb_data:
  influxdb_config:
  backend_logs:
  prometheus_data:
  grafana_data:

networks:
  cloudnet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16